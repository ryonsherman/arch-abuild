#!/usr/bin/env python2

# Source = [(arch)][dest:[src:]][vcs+]url[#frag]
#   * `arch` (optional) target build arch(s); defaults to PKGBUILD.
#   * `dest` (optional) destination package name. needed?
#   * `src`  (optional) source folder name relative to project root.
#   * `vcs`  (optional) version control system.
#   * `url`  (required) location of PKGBUILD.
#   * `frag` (optional) vcs fragment.
#   
# Example = package_name:folder_name:git+http://project_url#branch=project_branch
#
# Possibilities
# -------------
# pkg/aur:
# extra/network-manager-applet
# aur/yaourt-git
# 
# www:
# https://aur.archlinux.org/packages/ya/yaourt-git/yaourt-git.tar.gz
#
# git:
# git+https://github.com/ryonsherman/test-package.git
# renamed_pkg::git+https://github.com/ryonsherman/test-package.git
# -
# archlinux-themes-balou:git+https://github.com/ryonsherman/aur.git
# renamed_pkg:archlinux-themes-balou:git+https://github.com/ryonsherman/aur.git
# 
# arch:
# (any)https://aur.archlinux.org/packages/ya/yaourt-git/yaourt-git.tar.gz
# 

import os
import subprocess

vcs  = [
    ('hg', 'hg'),
    ('git', 'git'),
    ('svn', 'svn'),
    ('cvs', 'cvs')
]
exts = [
    ('.zip', 'unzip'),
    ('.tar', 'tar -xvf'),
    ('.tar.gz', 'tar -zxvf'),
    ('.tar.bz2', 'tar -jxvf')
]

def call(cmd, verbose=True):
    if not verbose:
        cmd += "&> /dev/null"
    subprocess.call(cmd, shell=True)


class Package(object):
    verbose = False

    def __init__(self, name, src, dest=None):
        self.name = name

        self.src  = src
        self.dest = dest or './'

    @property
    def src(self):
        return self._src
    @src.setter
    def src(self, src):
        # parse arch
        if src.startswith('('):
            src = src.split(')')
            self.arch = src[0][1:]
            src = src[1]
        self._src = src

    @property
    def dest(self):
        return self._dest
    @dest.setter
    def dest(self, dest):
        dest = os.path.join(os.getcwd(), dest)
        if not dest.endswith(self.name):
            dest = os.path.join(dest, self.name)
        if not os.path.exists(dest):
            os.makedirs(dest)
        self._dest = dest
    
    @property
    def arch(self):
        return getattr(self, '_arch', None)
    @arch.setter
    def arch(self, arch):
        for char in [',', ':', ' ']:
            split = arch.split(char)
            if len(split) > 1:
                self._arch = split
                return
        self._arch = [arch]

    def download(self):
        # parse subdir
        parts = self.src.split(':')
        if len(parts) == 3:
            src = ''.join(parts[1:])
            subdir = parts[0]
            # TODO: deal with subdir

        # handle version controlled sources
        for vc, cmd in vcs:
            if self.src.startswith('%s+' % vc):
                # TODO: handle vcs
                return

        # handle repo shorthand
        if self.src.startswith('@'):
            pass

        # handle www sources
        elif self.src.startswith('http'):
            cmd = ''
            dest = self.dest
            for ext in [ext[0] for ext in exts]:
                if self.src.endswith(ext):
                    dest = os.path.join(dest, self.name) + ext
                    cmd = '-o %s' % dest
                    break
            if os.listdir(self.dest):
                self._dest = dest
                return
            cmd = "cd %s && curl %s %s" % (self.dest, cmd, self.src)
            call(cmd)
            self._dest = dest

        # handle local source
        else:
            pass

    def extract(self):
        cmd = ''
        dest = ''
        for ext, cmd in exts:
            if self.dest.endswith(ext):
                dest = os.path.dirname(self.dest)
                break
        if not dest:
            return
        cmd = "cd %s && %s %s" % (dest, cmd, self.dest)
        call(cmd, self.verbose)
        self._dest = dest

    def build(self):
        pkg = 'PKGBUILD'
        for root, dirs, files in os.walk(self.dest):
            if pkg in files:
                cmd = "cd %s" % root + \
                    "&& makepkg -L %s.log -fc" % self.name
                call(cmd, self.verbose)

                # TODO: return code
                cmd = "mv %s/*.tar.xz pkg" % root
                call(cmd, self.verbose)
                return
        return -1                

if __name__ == '__main__':
    import codecs
    import argparse
    from ConfigParser import SafeConfigParser

    parser = argparse.ArgumentParser()

    def config_file(arg):
        if not os.path.exists(arg):
            return parser.error("No such file: '%s'" % arg)
        config = SafeConfigParser()
        with codecs.open(arg, 'r', encoding='utf-8') as fp:
            config.readfp(fp)
        if not config.has_section('source'):
            return parser.error("Invalid config file: '%s'" % arg)
        return config

    parser.add_argument('action', default='build',
        choices=['download', 'extract', 'build'], nargs='?',
        help="Action to perform (default: %(default)s)")
    parser.add_argument('config', default="ABUILD",
        type=config_file, nargs='?',
        help="Config file path (default: ./%(default)s)")
    parser.add_argument('--srcdir', default='src',
        help="Source directory (default: ./%(default)s)")
    parser.add_argument('--pkgdir', default='pkg',
        help="Package directory (default: ./%(default)s)")

    args = parser.parse_args()

    print "==> Indexing packages..."
    pkgs = []
    for pkg, url in args.config.items('source'):
        print "  -> Indexing %s..." % pkg
        pkgs.append(Package(pkg, url, args.srcdir))
    
    print "==> Downloading packages..."
    if not os.path.exists('src'):
        os.makedirs('src')
    for pkg in pkgs:
        print "  -> Downloading %s..." % pkg.name
        pkg.download()

    if args.action != 'download':
        print "==> Extracting packages..."
        for pkg in pkgs:
            print "  -> Extracting %s..." % pkg.name
            pkg.extract()

        if args.action != 'extract':
            print "==> Building packages:"
            if not os.path.exists('pkg'):
                os.makedirs('pkg')
            for pkg in pkgs:
                print "  -> Building %s..." % pkg.name
                ret = pkg.build()
                if ret == -1:
                    print "Unable to locate PKGBUILD"
